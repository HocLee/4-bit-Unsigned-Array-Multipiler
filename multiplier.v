
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module multiplier(X,Y,S);
input [3:0] X, Y;
output[7:0] S;

wire 	[3:0]   xy_1, xy_2, xy_3, xy_4;
wire	[2:0]	s_out_0,s_out_1,s_out_2,s_out_3;
wire	[2:0]	c_out_0,c_out_1,c_out_2,c_out_3;


and (xy_1[0],	X[0],	Y[0]);
and (xy_1[1],	X[1],	Y[0]);
and (xy_1[2],	X[2],	Y[0]);
and (xy_1[3],	X[3],	Y[0]);

and (xy_2[0],	X[0],	Y[1]);
and (xy_2[1],	X[1],	Y[1]);
and (xy_2[2],	X[2],	Y[1]);
and (xy_2[3],	X[3],	Y[1]);

and (xy_3[0],	X[0],	Y[2]);
and (xy_3[1],	X[1],	Y[2]);
and (xy_3[2],	X[2],	Y[2]);
and (xy_3[3],	X[3],	Y[2]);

and (xy_4[0],	X[0],	Y[3]);
and (xy_4[1],	X[1],	Y[3]);
and (xy_4[2],	X[2],	Y[3]);
and (xy_4[3],	X[3],	Y[3]);


//Row 1
full_adder fa_1 (1'b0, xy_1[1], xy_2[0],s_out_0[0], c_out_0[0]);
full_adder fa_2 (1'b0, xy_1[2], xy_2[1],s_out_0[1], c_out_0[1]);
full_adder fa_3 (1'b0, xy_1[3], xy_2[2],s_out_0[2], c_out_0[2]);

//Row 2
full_adder fa_4 (xy_3[0], c_out_0[0], s_out_0[1],	s_out_1[0], c_out_1[0]);
full_adder fa_5 (xy_3[1], c_out_0[1], s_out_0[2],	s_out_1[1], c_out_1[1]);
full_adder fa_6 (xy_3[2], c_out_0[2], xy_2[3],		s_out_1[2], c_out_1[2]);

//Row 3
full_adder fa_7 (xy_4[0], c_out_1[0], s_out_1[1],	s_out_2[0], c_out_2[0]);
full_adder fa_8 (xy_4[1], c_out_1[1], s_out_1[2],	s_out_2[1], c_out_2[1]);
full_adder fa_9 (xy_4[2], c_out_1[2], xy_3[3],		s_out_2[2], c_out_2[2]);

//Row 4
full_adder fa_10 (1'b0, 			c_out_2[0], s_out_2[1],	s_out_3[0], c_out_3[0]);
full_adder fa_11 (c_out_3[0], 	c_out_2[1], s_out_2[2],	s_out_3[1], c_out_3[1]);
full_adder fa_12 (c_out_3[1], 	c_out_2[2], xy_4[3],		s_out_3[2], c_out_3[2]);

assign S= {c_out_3[2] , s_out_3[2], s_out_3[1], s_out_3[0], s_out_2[0], s_out_1[0], s_out_0[0], xy_1[0]};

endmodule

//====================================================

module full_adder(a,b,cin,sum,cout);
input 	a,b,cin;
output 	sum,cout;
wire 		[2:0] temp;

assign temp[0] =a ^ b;
assign sum= temp[0] ^ cin;
assign cout= (temp[0] & cin)|(a&b);

endmodule